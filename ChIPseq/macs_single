INPUTBED=XXINPUTBEDXX
TREATBED=XXTREATBEDXX
WORKDIR=XXWORKDIRXX
SAMPLENAME=XXSAMPLENAMEXX
GENOME=XXGENOMEXX

CENTERFRAGS=false
FRAGMENTLENGTH=200

PATH=$PATH:~/src/bedtools2/bin

TREATSORTBED=${SAMPLENAME}.sort.bed
INPUTSORTBED=${SAMPLENAME}_input.sort.bed
FRAGMENTSBED=${SAMPLENAME}.fragments_${FRAGMENTLENGTH}bp.bed
#BEDGRAPHFILE=${SAMPLENAME}.fragments_${FRAGMENTLENGTH}bp.bedGraph
#BIGWIGFILE=${SAMPLENAME}.fragments_${FRAGMENTLENGTH}bp.bigWig
#PEAKSBED=${SAMPLENAME}_peaks.bed
#GENOMEFILE=~/data/UCSC_Downloads/${GENOME}/chrom.sizes

cd $WORKDIR

# sort bed files
sort -k 1,1 -k 2,2n -u $TREATBED > $TREATSORTBED
sort -k 1,1 -k 2,2n -u $INPUTBED > $INPUTSORTBED

# call peaks with MACS and make fragments file
export PYTHONPATH=/scratch/groups/crabtree/MACS-1.4.1/lib/python2.6/site-packages
if [ $GENOME = "hg19" ]; then
  python /scratch/groups/crabtree/MACS-1.4.1/bin/macs14 -t $TREATSORTBED -c $INPUTSORTBED -f BED -g hs -n $SAMPLENAME

  if [ "$CENTERFRAGS" = true ]; then
    awk -v len=$FRAGMENTLENGTH 'BEGIN { OFS="\t"; while(getline < "/home/hodgeshc/data/UCSC_Downloads/hg19/chrom.sizes" > 0) chr[$1]=$2 } { if($6=="+") { start=$2-int(len/2); end=$2+int(len/2) } else { start=$3-int(len/2); end=$3+int(len/2) } if(start<0) start=0; if(end>chr[$1]) end=chr[$1]; $2=start; $3=end; if(!seen[$1,start,end,$6]) print; seen[$1,start,end,$6]++ }' $TREATSORTBED | sort -k 1,1 -k 2,2n > $FRAGMENTSBED
  else
    awk -v len=$FRAGMENTLENGTH 'BEGIN { OFS="\t"; while(getline < "/home/hodgeshc/data/UCSC_Downloads/hg19/chrom.sizes" > 0) chr[$1]=$2 } { if($6=="+") { $3=$2+len } else { $2=$3-len }; if($2<0) $2=0; if($3>chr[$1]) $3=chr[$1]; if(!seen[$1,$2,$3,$6]) print; seen[$1,$2,$3,$6]++ }' $TREATSORTBED | sort -k 1,1 -k 2,2n > $FRAGMENTSBED
  fi

elif [ $GENOME = "mm9" ]; then
  python /scratch/groups/crabtree/MACS-1.4.1/bin/macs14 -t $TREATSORTBED -c $INPUTSORTBED -f BED -g mm -n $SAMPLENAME

  if [ "$CENTERFRAGS" = true ]; then
    awk -v len=$FRAGMENTLENGTH 'BEGIN { OFS="\t"; while(getline < "/home/hodgeshc/data/UCSC_Downloads/mm9/chrom.sizes" > 0) chr[$1]=$2 } { if($6=="+") { start=$2-int(len/2); end=$2+int(len/2) } else { start=$3-int(len/2); end=$3+int(len/2) } if(start<0) start=0; if(end>chr[$1]) end=chr[$1]; $2=start; $3=end; if(!seen[$1,start,end,$6]) print; seen[$1,start,end,$6]++ }' $TREATSORTBED | sort -k 1,1 -k 2,2n > $FRAGMENTSBED
  else
    awk -v len=$FRAGMENTLENGTH 'BEGIN { OFS="\t"; while(getline < "/home/hodgeshc/data/UCSC_Downloads/mm9/chrom.sizes" > 0) chr[$1]=$2 } { if($6=="+") { $3=$2+len } else { $2=$3-len }; if($2<0) $2=0; if($3>chr[$1]) $3=chr[$1]; if(!seen[$1,$2,$3,$6]) print; seen[$1,$2,$3,$6]++ }' $TREATSORTBED | sort -k 1,1 -k 2,2n > $FRAGMENTSBED
  fi

fi

# SCALE=`bedtools intersect -sorted -a $PEAKSBED -b $FRAGMENTSBED | wc -l | awk '{ print 1e6/$1 }'`
# bedtools genomecov -scale $SCALE -bg -trackline -trackopts "name=\"$SAMPLENAME\"" -i $FRAGMENTSBED -g $GENOMEFILE > $BEDGRAPHFILE
# bedGraphToBigWig $BEDGRAPHFILE $GENOMEFILE $BIGWIGFILE
# gzip $BEDGRAPHFILE

